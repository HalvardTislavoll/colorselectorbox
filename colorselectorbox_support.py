#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# Support module generated by PAGE version 5.6
#  in conjunction with Tcl version 8.6
#    Nov 07, 2020 09:30:38 AM CET  platform: Linux
""".........filname : colorselectorbox_support.py
............Purpose : choose colors a la Gimp color picker box
..date last updated : Nov 07, 2020
.............Author : Halvard Tislavoll
.....released under : MIT License
.the current status : C  (Completed or Incomplete)"""
# ============================================================================ #
import sys
import share
import grayshadeselectorbox
import grayshadeselectorbox_support

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk
    from tkinter.colorchooser import askcolor

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

def init(top, gui, *args, **kwargs):
    global w, top_level, root
    w = gui
    top_level = top
    root = top
    #--------------here starts my code:
    share.solo=False   # inter form var = this is a multiform app
    set_share_variables()   

def set_share_variables():
    """Function which initiates share variables."""
    share.black_white=False   # use color on labels
    share.top_color="cornflowerblue"
    share.rem_top_color="cornflowerblue"
    share.bottom_color="LightSkyBlue1"
    share.rem_bottom_color="LightSkyBlue1"
    share.rem_top_black_white="black"
    share.top_idx=0
    share.level='top'
    share.rem_bottom_black_white="white"
    share.bottom_idx=100
    show_label_color(share.top_color, share.bottom_color)   # update labels

def show_label_color(top, bottom):
    """Function which show updated label colors or gray shades."""
    w.lbl_top_color.configure(background=top)
    w.lbl_bottom_color.configure(background=bottom)

def on_btn_black_white(p1):
    """Function which alternates between color and gray shades."""
    st = share.black_white
    if st:
        show_label_color(share.top_color, share.bottom_color)
        share.black_white=False
    elif not st:
        show_label_color(share.rem_top_black_white, share.rem_bottom_black_white)
        share.black_white=True

def on_btn_change_color():
    """Function which alternates between top and bottom lbl."""
    bw = share.black_white
    if bw:
        remember_top=share.rem_top_black_white
        remember_idx=share.top_idx
        share.rem_top_black_white=share.rem_bottom_black_white
        share.top_idx=share.bottom_idx
        share.rem_bottom_black_white=remember_top
        share.bottom_idx=remember_idx
        show_label_color(share.rem_top_black_white, share.rem_bottom_black_white)
    elif not bw:
        remember_top=share.top_color
        share.top_color=share.bottom_color
        share.bottom_color=remember_top
        show_label_color(share.top_color, share.bottom_color)

def on_lbl_top_color(p1):
    """Function which run grayshadeselectorbox when top lbl is pressed."""
    sbw = share.black_white
    if sbw:
        share.level='top'
        grayshadeselectorbox.create_Toplevel1(root)
        show_label_color(share.rem_top_black_white, share.rem_bottom_black_white)
    elif not sbw:
        remember_color=share.top_color
        try:
            share.top_color=askcolor(color=share.top_color, title="select foreground color")[-1]
            if not share.top_color:
                share.top_color=remember_color
        except:
            pass
        show_label_color(share.top_color, share.bottom_color)

def on_lbl_bottom_color(p1):
    """Function which run grayshadeselectorbox when bottom lbl is pressed."""
    wb = share.black_white
    if wb:
        share.level='bottom'
        grayshadeselectorbox.create_Toplevel1(root)
        show_label_color(share.rem_top_black_white, share.rem_bottom_black_white)
    elif not wb:
        remember_color=share.bottom_color
        try:
            share.bottom_color=askcolor(color=share.bottom_color, title="select background color")[-1]
            if not share.bottom_color:
                share.bottom_color=remember_color
        except:
            pass
        show_label_color(share.top_color, share.bottom_color)

def show_me():
    """Function which run after called from a second frame."""
    show_label_color(share.rem_top_black_white, share.rem_bottom_black_white)

def destroy_window():
    """Function which closes the window."""
    global top_level
    top_level.destroy()
    top_level = None

if __name__ == '__main__':
    import colorselectorbox
    colorselectorbox.vp_start_gui()
